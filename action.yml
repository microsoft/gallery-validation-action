name: 'Gallery Standard Validation'
description: 'Validate the standard of the gallery'
inputs:
  repositoryURL:
    description: 'The URL of the repository to validate'
    required: false
  branch:
    description: 'The branch of the repository to validate'
    required: false
    default: 'main'
  workingDirectory:
    description: 'The path of target template to validate'
    required: false
    default: '.'
outputs:
  resultFile:
    description: "A file path to a results file."
    value: ${{ steps.run_validation.outputs.resultFile}}
runs:
  using: "composite"
  steps:
    - name: Prepare repository
      run: |
        if [ "${{ inputs.repositoryURL }}" != "" ]; then
          echo "Cloning the ${{ inputs.branch }} branch"
          git clone --branch ${{ inputs.branch }} ${{ inputs.repositoryURL }} ${{ runner.temp }}/candidate-repo
          echo "REPOSITORY_PATH=${{ runner.temp }}/candidate-repo" >> $GITHUB_ENV
          repo_info=$(echo "${{ inputs.repositoryUrl }}" | sed 's|https://github.com/||')
          echo "REPOSITORY_NAME=$repo_info" >> $GITHUB_ENV
        elif [ -d "${{ inputs.workingDirectory }}" ]; then
          echo "Using the provided repo path: ${{ inputs.workingDirectory }}"
          repository_path=$(realpath "${{ inputs.workingDirectory }}")
          echo "REPOSITORY_PATH=$repository_path" >> $GITHUB_ENV
        fi
      shell: bash
    
    - name: Add execute permission to hooks script
      working-directory: ${{ env.REPOSITORY_PATH }}
      run: |
        if [ -d "hooks" ] && [ "$(ls -A hooks/*.sh 2>/dev/null)" ]; then
          chmod +x hooks/*.sh
        else
          echo "No hooks directory or no .sh files found in hooks directory"
        fi
      shell: bash

    - name: Extract topics
      id: extract_repo_info
      run: |
        repository_name=${{ env.REPOSITORY_NAME || github.repository }}
        topics_list=$(gh api -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" repos/$repository_name/topics | jq -r '.names | join(",")')
        echo "topics=\"$topics_list\"" >> $GITHUB_ENV
      shell: bash
      env:
        GITHUB_TOKEN: ${{ env.GITHUB_TOKEN }}

    - name: Run Microsoft Security DevOps Analysis
      uses: microsoft/security-devops-action@v1
      id: msdo
      with:
        tools: templateanalyzer
      env:
        GDN_TEMPLATEANALYZER_ANALYZEDIRECTORY: ${{ env.REPOSITORY_PATH }}
      continue-on-error: true

    - name: Set environment name with timestamp
      id: set_env_name
      run: |
        current_time=$(date +%m%d%H%M)
        azure_env_name="${{ env.AZURE_ENV_NAME }}-$current_time"
        echo "AZURE_ENV_NAME=$azure_env_name" >> $GITHUB_ENV
        echo "azure_env_name is $azure_env_name"
      shell: bash
      env:
        AZURE_ENV_NAME: ${{ env.AZURE_ENV_NAME }}

    - name: Install AZD
      uses: Azure/setup-azd@v1.0.0

    - name: Log in with Azure (Federated Credentials)
      if: ${{ env.AZURE_CLIENT_ID != '' }}
      run: |
        azd auth login --client-id "${{ env.AZURE_CLIENT_ID }}" --federated-credential-provider "github" --tenant-id "${{ env.AZURE_TENANT_ID }}"
      shell: bash
      env:
        AZURE_CLIENT_ID: ${{ env.AZURE_CLIENT_ID }}
        AZURE_TENANT_ID: ${{ env.AZURE_TENANT_ID }}

    - name: Run validation
      id: run_validation
      working-directory: ${{ env.REPO_PATH }}
      run: |
        pip install -r ${{ github.action_path }}/requirements.txt
        python ${{ github.action_path }}/src/gallery_validate.py . --debug --azdup --azddown --topics ${{ env.TOPICS }} --msdoresult ${{ steps.msdo.outputs.sarifFile }} --output ${{ env.AZURE_ENV_NAME }}-output.log
        output_link=$(realpath ${{ env.AZURE_ENV_NAME }}-output.log)
        echo "resultFile is $output_link"
        echo "resultFile=$output_link" >> $GITHUB_OUTPUT
      shell: bash
      env:
        REPO_PATH: ${{ env.REPOSITORY_PATH }}
        TOPICS: ${{ env.topics }}
        AZURE_ENV_NAME: ${{ env.AZURE_ENV_NAME }}
        AZURE_LOCATION: ${{ env.AZURE_LOCATION }}
        AZURE_SUBSCRIPTION_ID: ${{ env.AZURE_SUBSCRIPTION_ID }}
        CREATE_ROLE_FOR_USER: false
        AZURE_PRINCIPAL_TYPE: "ServicePrincipal"

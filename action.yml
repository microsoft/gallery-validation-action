name: 'Gallery Standard Validation'
description: 'Validate the standard of the gallery'
inputs:
  repositoryURL:
    description: 'The URL of the repository to validate'
    required: false
  branch:
    description: 'The branch of the repository to validate'
    required: false
    default: 'main'
  workingDirectory:
    description: 'The path of target template to validate'
    required: false
    default: '.'
outputs:
  resultFile:
    description: "A file path to a results file."
    value: ${{ steps.set_output.outputs.resultFile}}
runs:
  using: "composite"
  steps:
    - name: Prepare repository
      run: |
        if [ "${{ inputs.repositoryURL }}" != "" ]; then
          echo "Cloning the ${{ inputs.branch }} branch"
          git clone --branch ${{ inputs.branch }} ${{ inputs.repositoryURL }} ${{ runner.temp }}/candidate-repo
          echo "REPOSITORY_PATH=${{ runner.temp }}/candidate-repo" >> $GITHUB_ENV
          repo_info=$(echo "${{ inputs.repositoryUrl }}" | sed 's|https://github.com/||')
          echo "REPOSITORY_NAME=$repo_info" >> $GITHUB_ENV
        elif [ -d "${{ inputs.workingDirectory }}" ]; then
          echo "Using the provided repo path: ${{ inputs.workingDirectory }}"
          repository_path=$(realpath "${{ inputs.workingDirectory }}")
          echo "REPOSITORY_PATH=$repository_path" >> $GITHUB_ENV
        fi
      shell: bash
    
    - name: Add execute permission to hooks script
      working-directory: ${{ env.REPOSITORY_PATH }}
      run: |
        if [ -d "hooks" ] && [ "$(ls -A hooks/*.sh 2>/dev/null)" ]; then
          chmod +x hooks/*.sh
        else
          echo "No hooks directory or no .sh files found in hooks directory"
        fi
      shell: bash

    - name: Extract topics
      id: extract_repo_info
      run: |
        repository_name=${{ env.REPOSITORY_NAME || github.repository }}
        topics_list=$(gh api -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" repos/$repository_name/topics | jq -r '.names | join(",")')
        echo "topics=\"$topics_list\"" >> $GITHUB_ENV
      shell: bash
      env:
        GITHUB_TOKEN: ${{ env.GITHUB_TOKEN }}

    - name: Run Microsoft Security DevOps Analysis
      uses: microsoft/security-devops-action@v1
      id: msdo
      with:
        tools: templateanalyzer
      env:
        GDN_TEMPLATEANALYZER_ANALYZEDIRECTORY: ${{ env.REPOSITORY_PATH }}
      continue-on-error: true

    - name: Set environment name with timestamp
      id: set_env_name
      run: |
        current_time=$(date +%m%d%H%M)
        azure_env_name="${{ env.AZURE_ENV_NAME }}-$current_time"
        echo "AZURE_ENV_NAME=$azure_env_name" >> $GITHUB_ENV
        echo "azure_env_name is $azure_env_name"
      shell: bash
      env:
        AZURE_ENV_NAME: ${{ env.AZURE_ENV_NAME }}

    - name: Copy validator into devcontainer
      run: |
        mkdir -p ${{ env.REPOSITORY_PATH }}/tva_${{ github.run_id }}
        cp -r ${{ github.action_path }}/src ${{ env.REPOSITORY_PATH }}/tva_${{ github.run_id }}/src
        cp ${{ github.action_path }}/requirements.txt ${{ env.REPOSITORY_PATH }}/tva_${{ github.run_id }}/requirements.txt
        cp ${{ steps.msdo.outputs.sarifFile }} ${{ env.REPOSITORY_PATH }}/tva_${{ github.run_id }}/msdo.sarif
        env > ${{ env.REPOSITORY_PATH }}/tva_${{ github.run_id }}/env_variables.txt
      shell: bash

    - uses: actions/github-script@v6
      id: script
      with:
        debug: true
        script: |
          const token = process.env['ACTIONS_RUNTIME_TOKEN']
          const runtimeUrl = process.env['ACTIONS_ID_TOKEN_REQUEST_URL']
          core.setOutput('TOKEN', token.trim())
          core.setOutput('ID_TOKEN_URL', runtimeUrl.trim())

    - name: Login azd in devcontainer
      id: azd-login
      uses: devcontainers/ci@v0.3
      with:
        runCmd: |
          azd auth login --client-id "${{ env.AZURE_CLIENT_ID }}" --federated-credential-provider "github" --tenant-id "${{ env.AZURE_TENANT_ID }}"
        subFolder: ${{ env.REPOSITORY_PATH }}
        env: |
          ACTIONS_ID_TOKEN_REQUEST_URL=${{ steps.script.outputs.ID_TOKEN_URL }}
          ACTIONS_ID_TOKEN_REQUEST_TOKEN=${{ steps.script.outputs.TOKEN }}
      
    - name: Run validator in devcontainer
      id: validation
      uses: devcontainers/ci@v0.3
      with:
        runCmd: |
          if [ -f tva_${{ github.run_id }}/env_variables.txt ]; then
            while IFS= read -r line; do
              var_name=$(echo "$line" | cut -d'=' -f1)
              if [ -z "${!var_name}" ]; then
                export "$line"
              fi
            done < tva_${{ github.run_id }}/env_variables.txt
          fi
          if ! command -v python &> /dev/null; then
            echo "python not found, installing python..."
            sudo apt-get update && sudo apt-get install -y python3 python3-pip python3-venv
          fi
          python3 -m venv .venv
          source .venv/bin/activate
          python3 -m pip install -r tva_${{ github.run_id }}/requirements.txt;
          python3 tva_${{ github.run_id }}/src/gallery_validate.py . --output tva_${{ github.run_id }}/output.log --debug --azdup --azddown --topics $TOPICS --msdoresult tva_${{ github.run_id }}/msdo.sarif
        subFolder: ${{ env.REPOSITORY_PATH }}
        env: |
          ACTIONS_ID_TOKEN_REQUEST_URL=${{ steps.script.outputs.ID_TOKEN_URL }}
          ACTIONS_ID_TOKEN_REQUEST_TOKEN=${{ steps.script.outputs.TOKEN }}
          AZURE_CLIENT_ID=${{ env.AZURE_CLIENT_ID }}
          AZURE_TENANT_ID=${{ env.AZURE_TENANT_ID }}
          AZURE_ENV_NAME=${{ env.AZURE_ENV_NAME }}
          AZURE_LOCATION=${{ env.AZURE_LOCATION }}
          AZURE_SUBSCRIPTION_ID=${{ env.AZURE_SUBSCRIPTION_ID }}
          CREATE_ROLE_FOR_USER=false
          AZURE_PRINCIPAL_TYPE=ServicePrincipal
          TOPICS=${{ env.topics }}
    
    - name: Send output to main workflow
      id: send_output
      uses: devcontainers/ci@v0.3
      with:
        runCmd: |
          cat tva_${{ github.run_id }}/output.log
        subFolder: ${{ env.REPOSITORY_PATH }}

    - id: set_output
      run: |
        echo "${{ steps.send_output.outputs.runCmdOutput }}" >> ${{ env.AZURE_ENV_NAME }}-output.log
        output_link=$(realpath ${{ env.AZURE_ENV_NAME }}-output.log)
        echo "resultFile is $output_link"
        echo "resultFile=$output_link" >> $GITHUB_OUTPUT
      working-directory: ${{ env.REPOSITORY_PATH }}
      shell: bash 
      env:
        AZURE_ENV_NAME: ${{ env.AZURE_ENV_NAME }}
